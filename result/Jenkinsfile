pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "harsha6798/voting-app-result-service-ci-image:${BUILD_NUMBER}"
        
    }

    stages{

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/harsha-ops/Voting-App.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ./result/"
            }
        }

        stage('Login to Docker Registry') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker_cred', // Use your actual credentials ID
                    usernameVariable: 'DOCKER_USERNAME', 
                    passwordVariable: 'DOCKER_PASSWORD'
            )]) {
                sh '''
                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                '''
            }

            }
        }

        stage('Push Docker Image') {
            steps{
                sh "docker push ${DOCKER_IMAGE}"

            }
        }

        stage('Test Kubernetes Connection') {
            steps {
                withCredentials([file(credentialsId: 'minikubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        // Use the kubeconfig to test kubectl connectivity
                        sh '''
                        export KUBECONFIG=$KUBECONFIG_FILE
                        echo "Testing Kubernetes Connection..."
                        kubectl config view
                        kubectl get nodes
                        '''
                    }
                }
            }
        }



        stage('Deploy to k8s') {
            steps {
                withCredentials([file(credentialsId: 'minikubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                    sh '''
                    export KUBECONFIG=$KUBECONFIG_FILE
                    sed -i "s|image: .*$|image: ${DOCKER_IMAGE}|" ./k8s-manifest/result-microservice-deploy.yml
                    kubectl apply -f ./k8s-manifest/result-microservice-deploy.yml
                    kubectl apply -f ./k8s-manifest/result-microservice-svc.yml
                    '''
                }
                }
                
            }
        }
    }
}